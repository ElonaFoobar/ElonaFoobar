namespace elona
{
inline int anic = 0;
inline elona_vector1<int> ap;

inline elona_vector1<int> _randcolor;
inline elona_vector1<int> aniref;
inline elona_vector1<int> anix;
inline elona_vector1<int> arenaop;
inline elona_vector1<int> chatval;
inline elona_vector1<int> commark;
inline elona_vector1<int> cyclemax;
inline elona_vector1<int> deck;
inline elona_vector1<int> deliver;
inline elona_vector1<int> dir;
inline elona_vector1<int> drop;
inline elona_vector1<int> dx;
inline elona_vector1<int> evdata1;
inline elona_vector1<int> evdata2;
inline elona_vector1<int> evlist;
inline elona_vector1<int> feat;
inline elona_vector1<int> fishanime;
inline elona_vector1<int> fixeditemenc;
inline elona_vector1<int> floorstack;
inline elona_vector1<int> followerexist;
inline elona_vector1<int> followerin;
inline elona_vector1<int> fsetchest;
inline elona_vector1<int> gdata;
inline elona_vector1<int> genetemp;
inline elona_vector1<int> giftvalue;
inline elona_vector1<int> i;
inline elona_vector1<int> icolref;
inline elona_vector1<int> ilight;
inline elona_vector1<int> invcontainer;
inline elona_vector1<int> invctrl;
inline elona_vector1<int> invicon;
inline elona_vector1<int> invmark;
inline elona_vector1<int> iorgweight;
inline elona_vector1<int> ipicref;
inline elona_vector1<int> irandomname;
inline elona_vector1<int> isetfruit;
inline elona_vector1<int> mainskill;
inline elona_vector1<int> mat;
inline elona_vector1<int> matneed;
inline elona_vector1<int> mdata;
inline elona_vector1<int> mdatatmp;
inline elona_vector1<int> p;
inline elona_vector1<int> rainx;
inline elona_vector1<int> rainy;
inline elona_vector1<int> recipememory;
inline elona_vector1<int> reph;
inline elona_vector1<int> repw;
inline elona_vector1<int> rowactre;
inline elona_vector1<int> rtval;
inline elona_vector1<int> sell;
inline elona_vector1<int> shadowmap;
inline elona_vector1<int> spact;
inline elona_vector1<int> spell;
inline elona_vector1<int> sx;
inline elona_vector1<int> sy;
inline elona_vector1<int> tc;
inline elona_vector1<int> tcol_at_txtfunc;
inline elona_vector1<int> tile;
inline elona_vector1<int> tile_default;
inline elona_vector1<int> tile_fog;
inline elona_vector1<int> tile_tunnel;
inline elona_vector1<int> tile_wall;
inline elona_vector1<int> trait;
inline elona_vector1<int> traitref;
inline elona_vector1<int> trate;
inline int TODO_show_prompt_val = 0;
inline elona_vector1<int> wh;
inline elona_vector1<int> windowshadow;
inline elona_vector1<int> x;
inline elona_vector1<int> y;
inline elona_vector1<std::string> ammoname;
inline std::vector<std::string> artifactlocation;
inline elona_vector1<std::string> bdrefn;
inline elona_vector1<std::string> biten;
inline elona_vector1<std::string> booktitle;
inline elona_vector1<std::string> buff;
inline elona_vector1<std::string> buffboard;
inline elona_vector1<std::string> cardrefn;
inline elona_vector1<std::string> description;
inline elona_vector1<std::string> egominorn;
inline elona_vector1<std::string> egoname;
inline elona_vector1<std::string> filemod;
inline elona_vector1<std::string> filter_creature;
inline elona_vector1<std::string> filtern;
inline elona_vector1<std::string> fishdatan;
inline elona_vector1<std::string> fltnrace;
inline elona_vector1<std::string> folder;
inline elona_vector1<std::string> gdatan;
inline elona_vector1<std::string> giftn;
inline elona_vector1<std::string> ialphanameref;
inline elona_vector1<std::string> iknownnameref;
inline elona_vector1<std::string> inputlog;
inline elona_vector1<std::string> invkey;
inline elona_vector1<std::string> ioriginalnameref2;
inline elona_vector1<std::string> ioriginalnameref;
inline elona_vector1<std::string> jkey;
inline elona_vector1<std::string> key;
inline std::string key_macro;
inline std::string key_identify;
inline std::string key_pageup;
inline std::string key_pagedown;
inline std::string key_cancel;
inline std::string key_help;
inline std::string key_msglog;
inline std::string key_enter;
inline std::string key_save;
inline std::string key_north;
inline std::string key_northeast;
inline std::string key_east;
inline std::string key_southeast;
inline std::string key_south;
inline std::string key_southwest;
inline std::string key_west;
inline std::string key_northwest;
inline std::string key_skill;
inline std::string key_close;
inline std::string key_cast;
inline std::string key_drink;
inline std::string key_read;
inline std::string key_zap;
inline std::string key_fire;
inline std::string key_search;
inline std::string key_target;
inline std::string key_dig;
inline std::string key_wait;
inline std::string key_inventory;
inline std::string key_drop;
inline std::string key_get;
inline std::string key_charainfo;
inline std::string key_eat;
inline std::string key_wear;
inline std::string key_godown;
inline std::string key_goup;
inline std::string key_interact;
inline std::string key_rest;
inline std::string key_use;
inline std::string key_bash;
inline std::string key_open;
inline std::string key_dip;
inline std::string key_pray;
inline std::string key_offer;
inline std::string key_journal;
inline std::string key_material;
inline std::string key_quick;
inline std::string key_get2;
inline std::string key_trait;
inline std::string key_look;
inline std::string key_give;
inline std::string key_prev;
inline std::string key_next;
inline std::string key_quickinv;
inline std::string key_throw;
inline std::string key_esc;
inline int key_alt;
inline std::string key_mode;
inline std::string key_ammo;
inline std::string key_mode2;
inline elona_vector1<std::string> key_list;
inline elona_vector1<std::string> key_select;
inline elona_vector1<std::string> keylog;
inline elona_vector1<std::string> magebookn;
inline elona_vector1<std::string> mdatan;
inline elona_vector1<std::string> moneyboxn;
inline elona_vector1<std::string> msg;
inline elona_vector1<std::string> msgtemp;
inline elona_vector1<std::string> msgtempprev;
inline elona_vector1<std::string> musicfile;
inline elona_vector1<std::string> netbuf;
inline elona_vector1<std::string> newsbuff;
inline elona_vector1<std::string> playerheader;
inline elona_vector1<std::string> q;
inline elona_vector1<std::string> qname;
inline elona_vector1<std::string> randn1;
inline elona_vector1<std::string> rn1;
inline elona_vector1<std::string> rn2;
inline elona_vector1<std::string> rtvaln;
inline elona_vector1<std::string> s1;
inline elona_vector1<std::string> s;
inline elona_vector1<std::string> soundfile;
inline elona_vector1<std::string> traitrefn2;
inline elona_vector1<std::string> traitrefn;
inline elona_vector1<std::string> untaglist;
inline elona_vector2<int> adata;
inline elona_vector2<int> breathlist;
inline elona_vector2<int> c_col;
inline elona_vector2<int> card;
inline elona_vector2<int> chipc;
inline elona_vector2<int> chipi;
inline elona_vector2<int> chipm;
inline elona_vector2<int> cmapdata;
inline elona_vector2<int> cycle;
inline elona_vector2<int> dblist;
inline elona_vector2<int> deco;
inline elona_vector2<int> dirchk;
inline elona_vector2<int> dirxy;
inline elona_vector2<int> encprocref;
inline elona_vector1<int> eqweapon1;
inline elona_vector1<int> eqrange;
inline elona_vector1<int> eqammo;
inline elona_vector1<int> eqring1;
inline elona_vector2<int> itemmemory;
inline elona_vector2<int> list;
inline elona_vector2<int> mapsync;
inline elona_vector2<int> mef;
inline elona_vector2<int> mefsubref;
inline elona_vector2<int> npcmemory;
inline elona_vector2<int> pcc;
inline elona_vector2<int> picfood;
inline elona_vector2<int> qdata;
inline elona_vector2<int> slight;
inline elona_vector2<int> userdata;
inline elona_vector2<std::string> _melee;
inline elona_vector2<std::string> cdatan2;
inline elona_vector2<std::string> cdatan;
inline elona_vector2<std::string> listn;
inline elona_vector2<std::string> mapnamerd;
inline elona_vector2<std::string> mtname;
inline elona_vector2<std::string> promptl;
inline elona_vector2<std::string> rnlist;
inline elona_vector2<std::string> userdatan;
inline elona_vector3<int> bddata;
inline elona_vector3<int> efmap;
inline elona_vector3<int> map;
inline int allyctrl;
inline int am;
inline int ammo;
inline int ammoproc;
inline int animode;
inline int aniy;
inline int area;
inline int arenaimport;
inline int attacknum;
inline int attackrange;
inline int attackskill;
inline int atxspot;
inline int autosave;
inline int body;
inline int bonus;
inline int camera;
inline int cardrefattack;
inline int cardrefcost;
inline int cardrefdomain;
inline int cardrefhp;
inline int cardrefpic;
inline int cardrefrare;
inline int cardrefskill;
inline int cardrefskillcost;
inline int cardreftype;
inline int cc;
inline int ccbk;
inline int cellaccess;
inline int cfg_alert;
inline int cfg_alwayscenter;
inline int cfg_animewait;
inline int cfg_attackanime;
inline int cfg_attackwait;
inline int cfg_autonumlock;
inline int cfg_autoturn;
inline int cfg_env;
inline int cfg_extrahelp;
inline int cfg_extrarace;
inline int cfg_fullscreen;
inline int cfg_heart;
inline int cfg_hideautoidentify;
inline int cfg_hideshopresult;
inline int cfg_ignoredislike;
inline int cfg_joypad;
inline int cfg_language;
inline int cfg_msg_box;
inline int cfg_msgaddtime;
inline int cfg_msgtrans;
inline int cfg_music;
inline int cfg_net;
inline int cfg_netchat;
inline int cfg_netwish;
inline int cfg_objectshadow;
inline int cfg_runscroll;
inline int cfg_runwait;
inline int cfg_scroll;
inline int cfg_scrsync;
inline int cfg_serverlist;
inline int cfg_shadow;
inline int cfg_skiprandevents;
inline int cfg_sound;
inline int cfg_startrun;
inline int cfg_story;
inline int cfg_wait1;
inline int cfg_walkwait;
inline int cfg_windowanime;
inline int cfg_wizard;
inline int cfg_xkey;
inline int cfg_zkey;
inline int chatesc;
inline int chatflag;
inline int chatteleport;
inline int ci;
inline int cidip;
inline int city;
inline int client;
inline int cm;
inline int cmbg;
inline int cmsex;
inline int cmshade;
inline int comctrl;
inline int cooktool;
inline int creaturepack;
inline int critical;
inline int crop;
inline int cs;
inline int cs_bk2;
inline int cs_bk;
inline int csctrl;
inline int cspecialeq;
inline int cw;
inline int cxinit;
inline int cyinit;
inline int damage;
inline int dbg_revealmap;
inline int dbid;
inline int dbmode;
inline int dbspec;
inline int dice1;
inline int dice2;
inline int distance;
inline int dmg;
inline int dmgfix;
inline double dmgmulti;
inline int dropval;
inline int dy;
inline int efcancel;
inline int efid;
inline int efp;
inline int efsource;
inline int efstatus;
inline int egg;
inline int egolv;
inline int ele;
inline int elep;
inline int elona_export;
inline int en;
inline int encounter;
inline int encounterlv;
inline int encounterref;
inline int enemylv;
inline int enemyteam;
inline int envonly;
inline int eqmultiweapon;
inline int eqtwohand;
inline int equip;
inline int evnum;
inline int exp;
inline int f2;
inline int f;
inline int filtermax;
inline int firstturn;
inline int fish;
inline int fishx;
inline int fishy;
inline int fixlv;
inline int fixmaterial;
inline int fixtransfermap;
inline int fltselect;
inline int flttypemajor;
inline int flttypeminor;
inline int foot;
inline int ghelp;
inline int gold;
inline int grown;
inline int header;
inline int hear;
inline int hire;
inline int homemapmode;
inline int hour_played;
inline int ichargelevel;
inline int idtresult;
inline int importmode;
inline int in;
inline int inf_clockh;
inline int inf_clockw;
inline int inf_clockx;
inline int inf_maxlog;
inline int inf_maxmsglen;
inline int inf_mesfont;
inline int inf_msgline;
inline int inf_msgspace;
inline int inf_msgx;
inline int inf_msgy;
inline int inf_screenh;
inline int inf_screenw;
inline int inf_screenx;
inline int inf_screeny;
inline int inf_tiles;
inline int inf_verh;
inline int inf_vertype;
inline int inf_very;
inline int initeco;
inline int initlv;
inline int initnum;
inline int input_mode;
inline int invally;
inline int invfile;
inline int invhead;
inline int invrange;
inline int invsc;
inline int invsubroutine;
inline int jp;
inline int key_escape;
inline int key_shift;
inline int key_tab;
inline int keybd_attacking;
inline int keybd_wait;
inline int keyhalt;
inline int keyrange;
inline int keywait;
inline int lastctrl;
inline int len;
inline int levelexitby;
inline int listmax;
inline int livestock;
inline int lomiaseaster;
inline int mapstartx;
inline int mapstarty;
inline int mapsubroutine;
inline int mapupdate;
inline int marry;
inline int maxbreath;
inline int maxitemid;
inline int maxrain;
inline int medit;
inline int menucycle;
inline int minlevel;
inline int mode;
inline int mousel;
inline int msgalert;
inline int msgdup;
inline int msgkeep;
inline int msgline;
inline int msync;
inline int mtilefilecur;
inline int music;
inline int mutex_handle;
inline int nostack;
inline int novoidlv;
inline int nowindowanime;
inline int objfix;
inline int objlv;
inline int obvious;
inline int oc;
inline int orgdmg;
inline int p2;
inline int page;
inline int page_bk;
inline int pagemax;
inline int pagesize;
inline int pcattacker;
inline int petarenawin;
inline int potionspill;
inline int potionthrow;
inline int promptmax;
inline int promptx;
inline int prompty;
inline int prot;
inline int protdice1;
inline int protdice2;
inline int quickkeywait;
inline int quickpage;
inline int r1;
inline int r2;
inline int r;
inline int raderh;
inline int raderw;
inline int raderx;
inline int radery;
inline int range_;
inline int rapidmagic;
inline int rc;
inline int ref1;
inline int ref2;
inline int reftype;
inline int reftypeminor;
inline int returnfromidentify;
inline int rq;
inline int running;
inline int sc;
inline int scene_cut;
inline int sceneid;
inline int scenemode;
inline int screenmsgy;
inline int screenupdate;
inline int scroll;
inline int scrollanime;
inline int scrollp;
inline int scrturn;
inline int scx;
inline int scxbk;
inline int scy;
inline int scybk;
inline int sexvalue;
inline int shade;
inline int shoptrade;
inline int showresist;
inline int size;
inline int sizefix;
inline int sound;
inline int step;
inline int strsize;
inline int supply;
inline int sxfix;
inline int syfix;
inline int t;
inline int tail;
inline int tcbk;
inline int tcopy;
inline int tg;
inline int ti;
inline int tile_doorclosed;
inline int tile_downstairs;
inline int tile_hidden;
inline int tile_upstairs;
inline int time_begin;
inline int time_warn;
inline int tlocx;
inline int tlocy;
inline int tnew;
inline int tx;
inline int txt3rd;
inline int txtvalid;
inline int ty;
inline int usernpcmax;
inline int userrelation;
inline int vfix;
inline int voidlv;
inline int windowh;
inline int windoww;
inline int windowx;
inline int windowy;
inline int worker;
inline int ww;
inline int wx;
inline int wy;
inline int x1;
inline int x2;
inline int x_at_txtfunc;
inline int y1;
inline int y2;
inline int y_at_txtfunc;
inline std::string cardrefrace;
inline std::string cfg_font1;
inline std::string cfg_font2;
inline std::string classname;
inline std::string cmaka;
inline std::string dbidn;
inline std::string defload;
inline std::string fmapfile;
inline std::string geneuse;
inline std::string homepage;
inline std::string key_alter;
inline std::string lastword;
inline std::string mid;
inline std::string note_buff;
inline std::string playerid;
inline std::string refstr;
inline std::string s2;
inline std::string strblank;
inline std::string strhint1;
inline std::string strhint2;
inline std::string strhint3;
inline std::string strhint3b;
inline std::string strhint5;
inline std::string strhint5b;
inline std::string strhint7;
inline std::string txtcopy;
inline std::string userfile;
inline std::string usermsg;
bool actionsp(int, int);
int addbuff(int = 0, int = 0, int = 0, int = 0);
int advfavoriteskill(int = 0);
int advfavoritestat(int = 0);
int ai_check();
int blendcheckext(int = 0, int = 0);
int blendcheckmat(int = 0);
int blendmatnum(int = 0, int = 0);
int breath_list();
int calcincome(int = 0);
int calcmagiccontrol(int = 0, int = 0);
int calcstartcard(int = 0);
int card_ref(int = 0);
int cardcanblock(int = 0);
int cardcandeclareattack(int = 0);
int cardcanuseskill(int = 0);
int cargocheck();
int carmor(int = 0);
int cbreeder(int = 0);
int cdbit(int = 0, int = 0);
int cell_featread(int = 0, int = 0, int = 0);
int cell_findspace(int = 0, int = 0, int = 0);
int cell_itemlist(int = 0, int = 0);
int cell_itemoncell(int = 0, int = 0);
int chara_anorexia(int = 0);
bool chara_unequip(int);
int characreate(int = 0, int = 0, int = 0, int = 0);
int clientguide(int = 0);
int cnvjkey(const std::string&);
int convertartifact(int = 0, int = 0);
int copy_chara(int = 0);
int cpblackcard(int = 0);
int cpcardnum(int = 0);
int cpscore(int = 0);
int create_card(int = 0, int = 0);
int customtalk(int = 0, int = 0);
int direction(int = 0, int = 0, int = 0, int = 0);
int discsetmc();
int dist(int = 0, int = 0, int = 0, int = 0);
int dist_town();
int dmgcon(int = 0, int = 0, int = 0);
int dmghp(int = 0, int = 0, int = 0, int = 0, int = 0);
void dmgmp(int, int);
void damage_insanity(int, int);
void dmgsp(int, int);
int efstatusfix(int = 0, int = 0, int = 0, int = 0);
int eleinfo(int = 0, int = 0);
int encadd(int = 0, int = 0, int = 0, int = 0, int = 0, int = 0, int = 0);
int encfind(int = 0, int = 0);
bool encfindspec(int = 0, int = 0);
int encflt(int = 0, int = 0);
int eqweaponheavy();
int eqweaponlight();
int evfind(int = 0);
int evid();
int exist_questtarget();
int findally(int = 0);
int findbuff(int = 0, int = 0);
int findchara(int = 0);
int findunid(const std::string&);
int fltsetdungeon();
int fov_los(int = 0, int = 0, int = 0, int = 0);
int gameover();
int get_freeally();
int get_freechara();
int get_route(int = 0, int = 0, int = 0, int = 0);
int getdecksum(int = 0);
int getholdersum(int = 0);
int getspotsum(int = 0);
int getunid(int = 0);
int getworker(int = 0, int = 0);
int iequiploc(int = 0);
int imeget();
int implevel(int = 0);
int inv_find(int = 0, int = 0);
int inv_getfreeid(int = 0);
int inv_getowner(int = 0);
bool inv_getspace(int);
int inv_sum(int = 0);
int inv_weight(int = 0);
int item_cold(int = 0, int = 0);
int item_find(int = 0, int = 0, int = 0);
int item_fire(int = 0, int = 0);
int item_identify(int = 0, int = 0, int = 0);
int item_separate(int);
int item_stack(int = 0, int = 0, int = 0);
int itemcreate(int = 0, int = 0, int = 0, int = 0, int = 0);
int itemfind(int = 0, int = 0, int = 0);
int itemusingfind(int, bool = false);
int key_direction();
int access_item_db(int);
int get_required_craft_materials();
int voting_box();
int try_to_cast_spell();
int try_to_reveal();
int can_evade_trap();
int try_to_disarm_trap();
int try_to_perceive_npc();
int do_create_character();
int do_create_item(int, int, int);
int initialize_quest_map_crop();
int initialize_random_nefia_rdtype1();
int initialize_random_nefia_rdtype4();
int initialize_random_nefia_rdtype5();
int initialize_random_nefia_rdtype2();
int initialize_random_nefia_rdtype3();
int initialize_quest_map_party();
int initialize_world_map();
int label_1753();
int get_card_info();
int label_1835();
int label_1845();
int proc_random_event();
int show_random_event_window(const std::string&);
int label_1898();
int label_1931();
int label_1932();
int label_19432();
int target_position();
int ctrl_ally();
int label_196902();
int label_1980();
int label_1984();
int select_alias(int);
int change_npc_tone();
int summon_cnpc();
int show_character_sheet();
int change_appearance();
int label_2044();
int ctrl_inventory();
int label_2072();
int label_2073();
int can_do_ranged_attack();
int label_2080();
int label_2083();
int ask_direction();
int show_prompt(int, int, int, int = 0, int = 0);
int label_2143();
int decode_book();
int read_normal_book();
int label_2167();
int label_2168();
int drink_potion();
int drink_well();
int read_scroll();
int label_2172();
int label_2174();
int label_2175();
int magic();
int pick_up_item();
int drop_item();
int equip_item();
int unlock_box(int);
int label_2217();
int label_2230();
int label_2231();
int give_potion_of_cure_corruption();
int new_ally_joins();
int label_2664();
int inv_getfreeid_force();
int label_2672();
int label_2694();
int label_2695();
int lastcard(int = 0);
int map_barrel(int = 0, int = 0);
int map_connectroom();
int map_createroom(int = 0);
int map_digcheck(int = 0, int = 0);
int map_digtoentrance1(int = 0, int = 0, int = 0, int = 0, int = 0);
int map_placedownstairs(int = 0, int = 0);
int map_placeupstairs(int = 0, int = 0);
int map_trap(int = 0, int = 0, int = 0, int = 0);
int map_web(int = 0, int = 0, int = 0);
int mapitemfind(int = 0, int = 0, int = 0);
int modpiety(int = 0);
int net_dl(const std::string&, const std::string&);
int net_dllist(const std::string&, int = 0);
int net_read(int = 0);
int net_send(const std::string&, int = 0);
int opencard2(int = 0, int = 0);
int pileremain();
int prodcheck();
int putcard(int = 0, int = 0);
int randattb();
int random_material(int = 0, int = 0);
int randomele();
int randomenc(int = 0);
int randomenclv(int = 0);
int randomencp(int = 0);
int randskill();
int relationbetween(int, int);
int relocate_chara(int = 0, int = 0, int = 0);
int roll(int, int, int);
int roll_max(int, int, int);
int roundmargin(int = 0, int = 0);
int route_info(int&, int&, int = 0);
int rpdiff(int = 0, int = 0, int = 0);
int servecard(int = 0);
int skillexp(int = 0, int = 0, int = 0, int = 0, int = 0);
int skillmod(int = 0, int = 0, int = 0);
int talk_conv(std::string&, int = 0);
int tradecheck(int = 0);
int trashcard(int = 0);
int winposy(int = 0, int = 0);
int zentohan(const std::string&, std::string&, int = 0);
std::string _aru(int = 0);
std::string _da(int = 0);
std::string _dana(int = 0);
std::string _daro(int = 0);
std::string _dozo(int = 0);
std::string _ga(int = 0);
std::string _ka(int = 0);
std::string _kana(int = 0);
std::string _kimi(int = 0);
std::string _kure(int = 0);
std::string _na(int = 0);
std::string _nda(int = 0);
std::string _noka(int = 0);
std::string _ore(int = 0);
std::string _rob(int = 0);
std::string _ru(int = 0);
std::string _s(int, bool = false);
std::string _s2(int = 0);
std::string _ta(int = 0);
std::string _tanomu(int = 0);
std::string _thanks(int = 0);
std::string _u(int = 0);
std::string _yo(int = 0);
std::string _yoro(int = 0);
std::string aln(int = 0);
std::string cnv_str(std::string&, const std::string&, const std::string&);
std::string cnvarticle(const std::string&);
std::string cnvdate(int, bool = true);
std::string cnven(const std::string&);
std::string cnveqweight(int = 0);
std::string cnvfix(int = 0);
std::string cnvitemname(int = 0);
std::string cnvplaytime(int = 0);
std::string cnvrank(int = 0);
std::string cnvrare(int = 0);
std::string cnvweight(int = 0);
std::string does(int = 0);
std::string elename(int = 0);
std::string fixtxt(const std::string&, int = 0);
std::string fltname(int = 0);
std::string foodname(int, const std::string&, int = 0, int = 0);
std::string getnpctxt(const std::string&, const std::string&);
std::string guildname();
std::string have(int = 0);
std::string he(int = 0, int = 0);
std::string him(int = 0, int = 0);
std::string his(int = 0, int = 0);
std::string is(int = 0);
std::string is2(int = 0);
std::string itemname(int = 0, int = 0, int = 0);
std::string lang(const std::string&, const std::string&);
std::string mapfile(int = 0);
std::string maplevel(int = 0);
std::string mapname(int, bool = false);
std::string name(int = 0);
std::string npcn(int = 0);
std::string random_title(int = 0);
std::string randomname();
std::string ranktitle(int = 0);
std::string refchara_str(int = 0, int = 0);
std::string rpmatname(int = 0);
std::string rpname(int = 0);
std::string rpsuccessrate(int = 0);
std::string sncnv(const std::string&);
std::string trimdesc(const std::string&, int = 0);
std::string txtbuilding(int = 0, int = 0);
std::string txtitemoncell(int = 0, int = 0);
std::string txtskillchange(int, int, bool);
std::string your(int);
std::string yourself(int = 0);
void actionproc();
void addbuilding(int = 0, int = 0, int = 0, int = 0);
void addefmap(int = 0, int = 0, int = 0, int = 0, int = 0, int = 0);
void addmef(
    int = 0,
    int = 0,
    int = 0,
    int = 0,
    int = 0,
    int = 0,
    int = 0,
    int = 0,
    int = 0,
    int = 0);
void addnews(int = 0, int = 0, int = 0, const std::string& = "");
void addnews2(const std::string&, int = 0);
void addnewstopic(const std::string&, const std::string&);
void anime_halt();
void animeblood(int = 0, int = 0, int = 0);
void animeload(int = 0, int = 0);
void arrayfile(bool, std::string_view, const fs::path&);
void auto_turn(int = 0);
void atxinit();
void begintempinv();
void bmes(const std::string&, int = 0, int = 0, int = 0);
void boxl(int = 0, int = 0, int = 0, int = 0);
void calcdecksize();
void calcdomain();
void calcstartattb(int = 0);
void cardhelp(const std::string&, int = 0);
void cardplayeradd(int = 0, int = 0, int = 0);
void cardplayerinit(int = 0, int = 0);
void cardpos(int = 0, int = 0);
void cdbitmod(int = 0, int = 0, int = 0);
void cell_check(int = 0, int = 0);
void cell_draw();
void cell_featclear(int = 0, int = 0);
void cell_featset(int = 0, int = 0, int = 0, int = 0, int = 0, int = 0);
void cell_movechara(int = 0, int = 0, int = 0);
void cell_refresh(int = 0, int = 0);
void cell_removechara(int = 0, int = 0);
void cell_setchara(int = 0, int = 0, int = 0);
void cell_swap(int = 0, int = 0, int = 0, int = 0);
void chara_preparepic(int = 0, int = 0);
void chara_vanquish(int = 0);
void chara_vomit(int = 0);
void check_kill(int = 0, int = 0);
void check_quest();
void clear_rprefmat();
void cnv_filestr(std::string&);
void cnvbonus(int = 0, int = 0);
void colorres(int = 0);
void cpflip();
void cpisenemy();
void cpisme();
void create_pcpic(int, bool);
void csfix();
void cslinedown();
void cslineup();
void cure_anorexia(int = 0);
void cursor_check();
void cutname(std::string&, int = 0);
void del_chara(int = 0);
void delbottomcard(int = 0);
void delbuff(int = 0, int = 0);
void delmef(int = 0);
void dipcursed(int = 0, int = 0);
void display_customkey(const std::string&, int, int);
void display_key(int = 0, int = 0, int = 0);
void display_msg(int = 0, int = 0);
void display_note(const std::string&, int = 0);
void display_topic(const std::string&, int = 0, int = 0, int = 0);
void display_window(int = 0, int = 0, int = 0, int = 0, int = 0, int = 0);
void display_window2(int = 0, int = 0, int = 0, int = 0, int = 0, int = 0);
void dmgcard(int = 0, int = 0);
void dmgplayer(int = 0, int = 0);
void draw_emo(int = 0, int = 0, int = 0);
void drawmenu(int = 0);
void eatstatus(int = 0, int = 0);
void efllistadd(int = 0, int = 0, int = 0, int = 0, int = 0, int = 0);
void egoadd(int = 0, int = 0);
void encremove(int = 0, int = 0, int = 0);
void eqrandweaponmage(int = 0);
void equipinfo(int = 0, int = 0, int = 0);
void evadd(int = 0, int = 0, int = 0);
void exittempinv();
void fileadd(const std::string&, int = 0);
void fillbg(int = 0, int = 0, int = 0, int = 0, int = 0);
void fix_input_chat(std::string&);
void fix_input_chat2(std::string&);
void fix_wish(std::string&);
void fixaiact(int = 0);
void flt(int = 0, int = 0);
void fltn(const std::string&);
void getrandomcard(int = 0);
void go_hostile();
void gravecard(int = 0);
void healcon(int = 0, int = 0, int = 0);
void healhp(int = 0, int = 0);
void healmp(int = 0, int = 0);
void healsan(int = 0, int = 0);
void healsp(int = 0, int = 0);
void help_halt();
void hostileaction(int = 0, int = 0);
void imeset(int = 0);
void incognitobegin();
void incognitoend();
void initcard(int = 0, int = 0, int = 0);
std::pair<int, int> inv_getheader(int);
void item_acid(int = 0, int = 0);
void item_checkknown(int = 0);
void item_compress(int);
void item_copy(int = 0, int = 0);
void item_delete(int = 0);
void item_exchange(int = 0, int = 0);
void item_num(int = 0, int = 0);
std::vector<int> itemlist(int, int);
void itemturn(int = 0);
void key_check(int = 0);
void keyrelease();
void initialize_rankn();
void initialize_post_data();
void initialize_building_daga();
void clear_trait_data();
void gain_race_feat();
void initialize_sound_file();
void play_music();
void initialize_nefia_names();
void initialize_picfood();
void replace_tags_in_quest_board();
void parse_talk_file();
void read_talk_file(const std::string&);
void get_npc_talk();
void update_main_quest_journal();
void append_subquest_journal(int);
void append_quest_item_journal();
void parse_quest_board_text(int);
void set_quest_data(int);
void replace_tags_in_quest_text();
void finish_elona();
void initialize_cloud_data();
void initialize_map_chip();
void initialize_item_chip();
void load_random_name_table();
void load_random_title_table();
std::string cheer_up_message(int);
void initialize_enchantment_data();
void get_enchantment_description(int, int, int, bool = false);
void initialize_ego_data();
void add_enchantments_depending_on_ego();
void add_enchantment_by_fixed_ego();
void add_enchantments();
void initialize_item_material_data();
void initialize_item_material();
void determine_item_material();
void change_item_material();
void apply_item_material();
void set_material_specific_attributes();
void initialize_fish_data();
void itemname_additional_info();
void initialize_craft_material_data();
void get_random_item_id();
void set_item_info();
void label_1346();
void end_dmghp();
void initialize_server_info();
void label_1399();
void initialize_ui_constants();
void label_1416();
void update_entire_screen();
void update_screen_hud();
void update_minimap();
void update_screen();
void label_1420();
void render_hud();
void label_1422();
void label_1423();
void draw_caption();
void label_1428();
void label_1429();
void label_1433();
void label_1434();
void label_1435();
void label_1436();
void label_1437();
void label_1438();
void label_1439();
void label_1440();
void fade_out();
void label_1442();
void label_1443();
void label_1444();
void label_1445();
void label_1446();
void refresh_speed_correction_value();
void gain_new_body_part();
void gain_level();
void label_1455();
void label_1456();
void label_1457();
void label_1458();
void label_1459();
void gain_skill_experience_lock_picking();
void gain_skill_experience_detection();
void gain_skill_experience_casting();
void gain_skill_experience_mana_capacity();
void label_1464();
void label_1465();
void label_1466();
void label_1467();
void label_1468();
void label_1469();
void label_1470();
void label_1471();
void label_1472();
void refresh_character();
void label_1512();
void gain_disarm_trap_experience();
void get_hungry(int);
void label_1520();
void refresh_burden_state();
void gain_special_action();
void label_1530();
void place_character();
void add_quality_parentheses();
void initialize_character();
void initialize_pc_character();
void label_1537();
void label_1538();
void label_15380();
void label_1539();
void label_15390();
void label_1540();
void main_menu_new_game();
void character_making_select_race();
void character_making_final_phase();
void clear_background_in_character_making();
void initialize_set_of_random_generation();
void label_1573();
void label_1576();
void label_1577();
void label_1578();
void label_1579();
void label_1580();
void label_1581();
void label_1583();
void eat_rotten_food();
void cook();
void apply_general_eating_effect();
void eating_effect_eat_iron();
void eating_effect_insanity();
void eating_effect_eat_horse();
void eating_effect_eat_holy_one();
void eating_effect_eat_at();
void eating_effect_eat_guard();
void eating_effect_fire();
void eating_effect_insanity2();
void eating_effect_eat_cute_one();
void eating_effect_eat_lovely_one();
void eating_effect_eat_poisonous_one();
void eating_effect_regeneration();
void eating_effect_eat_rotten_one();
void eating_effect_strength();
void eating_effect_magic();
void eating_effect_insanity3();
void eating_effect_calm();
void eating_effect_insanity4();
void eating_effect_chaos();
void eating_effect_lightning();
void eating_effect_eat_cat();
void eating_effect_ether();
void eating_effect_constitution();
void eating_effect_magic2();
void eating_effect_strength2();
void eating_effect_will();
void eating_effect_quick();
void eating_effect_pregnant();
void get_pregnant();
void initialize_cell_object_data();
void generate_random_nefia();
void initialize_random_nefia_rdtype6();
void initialize_quest_map_town();
void initialize_random_nefia_rdtype8();
void initialize_random_nefia_rdtype9();
void label_1709();
void initialize_random_nefia_rdtype10();
void initialize_home_mdata();
void build_new_building();
void initialize_home_adata();
void use_house_board();
void label_1723();
void label_1724();
void show_shop_log();
void label_1726();
void label_1727(bool);
void label_1728();
void label_1729(int);
void label_1730();
void update_ranch();
void set_character_generation_filter();
void monster_respawn();
void exit_map();
void label_1738();
void label_1739();
void initialize_map();
void label_1745();
void label_1746();
void label_1748();
void label_1749();
void label_1750();
void label_1751();
void initialize_adata();
void label_1754();
void label_1755();
void label_1773();
void label_1793();
void label_1802();
void label_1815();
void label_1816();
void label_1817();
void label_1818();
void label_1819();
void label_1823();
void label_1824();
void label_1825();
void label_1826();
void label_1827();
void label_1828();
void label_1836();
void label_1839();
void label_1840();
void label_1842();
void label_1844();
void label_18462();
void label_1848();
void label_18552();
void craft_material_menu();
void label_1866();
void label_18672();
void label_1870();
void label_1871();
void label_1872();
void label_1873();
void label_1874();
void label_1877();
void label_1878();
void label_1879();
void set_npc_religion();
void apply_god_blessing();
void get_god_description();
void label_1886();
void label_1888();
void switch_religion();
void pray();
void offer();
void label_1892();
void label_1901();
void initialize_recipememory();
void initialize_recipe();
void label_1922();
void label_1933();
void label_19342();
void label_1935();
void label_1942();
void label_1951();
void label_1955();
void label_1958();
void label_1964();
int feat_menu();
void label_1968();
int label_1969();
void update_journal();
void show_quest_board();
void list_adventurers();
void fix_wish();
void wish_end();
void what_do_you_wish_for();
void wish_for_card();
void wish_for_figure();
void select_wished_character();
void do_short_cut();
void do_dig_command();
void label_2005();
void label_2006();
void label_2007();
void do_give_command();
void do_interact_command();
void call_npc();
void label_2022();
void label_2026();
void label_2027();
void label_2031();
void label_2032();
void label_2038(int);
void label_2047(int);
void label_2048(int);
void equip_melee_weapon();
void ctrl_inventory_equipment();
void do_get_command();
void label_2055();
void sort_list_by_column1();
void label_2057();
void show_item_description();
void label_2074();
void label_2076();
void label_2077();
void label_2078();
void label_2079();
void label_2081();
void label_2082();
void label_2084();
void label_2085();
void label_2086();
void remove_card_and_figures();
void label_2088();
void migrate_save_data();
void label_2090();
void get_inheritance();
void load_gene_files();
void save_gene();
void load_user_file(const fs::path&);
void create_cnpc();
void load_cnpc_data();
void create_new_cnpc();
void label_2108();
void label_2109(int);
void delete_temporary_npc_files();
void delete_temporary_user_files();
void load_save_data();
void save_game();
void label_2114();
void main_title_menu();
void main_menu_continue();
void main_menu_incarnate();
void initialize_fovmap_and_fovlist();
void show_number_of_text_prompt(
    int val0,
    int val1,
    int val2,
    int val3,
    int val4 = 0);
void label_2134();
void label_2136();
void label_2144();
void label_21452();
void label_2146();
void label_2147();
void continuous_action_others();
void label_2149();
void label_2150();
void label_2151();
void label_2152();
void label_2153();
void label_2154();
void label_2155();
void label_2156();
void label_2157();
void label_2158();
void label_2159();
void label_2160();
void label_2161();
void label_2162();
void label_2187();
void label_2188();
void do_throw_command();
void label_2190();
void unequip_item();
void label_2196();
void do_read_commad();
void do_eat_command();
void do_drink_command();
void do_zap_command();
void label_2201();
void label_2203();
void label_2205();
void label_2206();
void label_2207(int);
void do_open_command();
void open_box();
void open_new_year_gift();
void try_to_open_locked_door();
void do_close_command();
void try_to_melee_attack();
void do_physical_attack();
void label_2220();
void label_2221();
void label_2222();
void label_2223();
void label_2224();
void do_dip_command();
void do_use_command();
void label_2232();
void label_2233(int);
void label_2234(int = 0);
void label_2235(int);
void label_2236();
void do_steal_command();
void label_2241();
void speak_to_npc();
void label_2243();
void label_2244();
void talk_unique();
void label_2249();
void label_2250();
void talk_npc();
void label_2252();
void label_2253();
void label_2254();
void label_2255();
void talk_end();
void talk_window();
void reset_talk_variables();
void init_talk_window_and_show();
void init_talk_window();
void show_talk_window();
void show_talk_window();
void label_2262();
void sell_item();
void load_shoptmp();
void label_2265();
void label_2266();
void label_2267();
void initialize_economy();
void show_city_chart();
void label_2276();
void label_2280();
void get_random_npc_id();
void initialize_cbit_filters();
void create_all_adventurers();
void create_adventurer();
void label_2662();
void set_item_which_will_be_used();
void wear_most_valuable_equipment_for_all_body_parts();
void wear_most_valuable_equipment();
void supply_new_equipment();
void label_2669();
void label_2670();
void label_2671();
void label_2673();
void label_2674();
void label_2675();
void failed_quest(int);
void label_2677();
void hunt_all_targets();
void complete_quest();
void do_play_scene();
void label_2685();
void label_2687();
void label_2690();
void label_2693(bool = false);
void label_2696();
void show_quick_menu();
void show_ex_help();
void label_2702();
void show_game_help();
void label_2707();
void label_2710();
void initialize_jkey();
void load_config2();
void load_config();
void label_2719();
void label_2720();
void set_option();
void play_scene();
void initialize_game();
void turn_begin();
void label_2735();
void label_2736();
void label_27412();
void turn_end();
void check_angband();
void conquer_lesimas();
void play_the_last_scene_again();
void pc_died();
void show_game_score_ranking();
void proc_event();
void lenfix(std::string&, int = 0);
void lovemiracle(int = 0);
void make_dish(int = 0, int = 0);
void make_sound(int = 0, int = 0, int = 0, int = 0, int = 0, int = 0);
void makecardlist();
void map_converttile();
void map_createroomdoor();
void map_initcustom(const std::string&);
void map_initialize();
void map_makedoor();
void map_nextdir1(int = 0, int = 0);
void map_nextdir2(int = 0, int = 0);
void map_placearena(int = 0, int = 0);
void map_placecharaonentrance(int = 0, int = 0, int = 0);
void map_placeplayer();
void map_randomtile(int = 0, int = 0);
void map_randsite(int = 0, int = 0);
void map_reload(const std::string&);
void map_setfog(int = 0, int = 0);
void map_tileset(int = 0);
void mapitem_cold(int = 0, int = 0);
void mapitem_fire(int = 0, int = 0);
void matdelmain(int = 0, int = 0);
void matgetmain(int = 0, int = 0, int = 0);
void modcorrupt(int = 0);
void modify_potential(int, int, int);
void modheight(int = 0, int = 0);
void modimp(int = 0, int = 0);
void modify_karma(int, int);
void modrank(int = 0, int = 0, int = 0);
void modweight(int, int, bool = false);
void msg_clear();
void msg_halt();
void msg_newline();
void msg_newlog();
void msg_write(std::string&);
void netload(const std::string&);
void opencard(int = 0);
void page_load();
void page_save();
void press(bool = false);
void put_questtarget();
void putenclv(int = 0);
void refreshspeed(int = 0);
void remain_make(int = 0, int = 0);
void removeitem(int, int);
void removeworker(int = 0);
void resistmod(int = 0, int = 0, int = 0);
void ride_begin(int = 0);
void ride_end();
void rm_crlf(std::string&);
void rowact_check(int = 0);
void rowact_item(int = 0);
void rowactend(int = 0);
void saccard(int = 0, int = 0);
void savecycle();
void setunid(int = 0, int = 0);
void showcard();
void showcard2(int = 0, int = 0);
void showcardholder();
void showcardpile();
void showeconomy(int, int, const std::string&, int = 0, int = 0);
void showscroll(const std::string&, int, int, int, int);
void showtitle(const std::string&, const std::string&, int = 0, int = 0);
void sickifcursed(int = 0, int = 0, int = 0);
void skillgain(int = 0, int = 0, int = 0, int = 0);
void skillinit(int = 0, int = 0, int = 0);
std::string snarmor(const std::string&);
std::string snbakery(const std::string&);
std::string snblack(const std::string&);
void snd(int = 0, int = 0, int = 0);
void sndload(const std::string&, int = 0);
std::string snfish(const std::string&);
std::string snfood(const std::string&);
std::string sngeneral(const std::string&);
std::string sngoods(const std::string&);
std::string sninn(const std::string&);
std::string snmagic(const std::string&);
std::string sntrade(const std::string&);
std::string sntrainer(const std::string&);
void sortenc(int = 0);
void spillblood(int = 0, int = 0, int = 0);
void spillfrag(int = 0, int = 0, int = 0);
void stxt(int, const std::string&);
void tcgdeck();
void tcgdraw();
void tcgdrawbg();
void tcgdrawcard(int = 0, int = 0);
void tcginit();
void tcgmain();
void text_set();
void turn_aggro(int = 0, int = 0, int = 0);
void txt_check();
void txt_conv();
void txtcontinue();
void txtef(int = 0);
void txteledmg(int = 0, int = 0, int = 0, int = 0);
void txtnew();
void txtsetlastword();
std::vector<std::string> txtsetwinword(int);
std::string txttargetlevel(int, int);
void txttargetnpc(int = 0, int = 0, int = 0);
void unzip2(const std::string&, const std::string&);
void wake_up();
void wet(int = 0, int = 0);
void window(int = 0, int = 0, int = 0, int = 0, int = 0, int = 0);
void window2(int = 0, int = 0, int = 0, int = 0, int = 0, int = 0);
void window_recipe2(int = 0);
void windowanime(int = 0, int = 0, int = 0, int = 0, int = 0, int = 0);
void windowanimecorner(int = 0, int = 0, int = 0, int = 0, int = 0, int = 0);
void zipadd(const std::string&);
void zipadd2(const std::string&);
void zipend2();
void zipinit2(const std::string&, const std::string&);
void cs_list(bool, const std::string&, int, int, int = 0, int = 0, int = 0);


template <typename T>
void txt()
{
    static_assert(false_v<T>);
}



inline std::string txt_tostr(const std::string& s)
{
    return s;
}



inline std::string txt_tostr(elona_vector1<std::string>& v)
{
    return v(0);
}



template <typename... Args>
void txt(Args&&... args)
{
    std::vector<std::string> text{txt_tostr(args)...};
    txtvalid = 0;
    if (hear != 0)
    {
        snd(hear);
        hear = 0;
    }
    msgtemp = text[rnd(std::size(text))];
    txt_conv();
    tcol_at_txtfunc(0) = 255;
    tcol_at_txtfunc(1) = 255;
    tcol_at_txtfunc(2) = 255;
}



} // namespace elona
